{"version":3,"sources":["components/GameInfo.js","components/Player.js","components/BoardSquare.js","components/GameBoard.js","AI.js","components/TicTacToe.js","index.js"],"names":["GameInfo","props","useState","startIsDisabled","setStartIsDisabled","resetIsDisabled","setResetIsDisabled","gameInfo","type","id","disabled","onClick","startClicked","value","resetGame","className","playAgainIsHidden","playAgainClicked","Player","thePlayer","changeHumanOrAI","changeAIDifficulty","hideUnchecked","hideUnselectedPlayers","playerChecked","humanOrAI","hideUnselectedAIDifficulty","AIDifficultyChecked","AIDifficulty","marker","name","checked","onChange","e","htmlFor","hideAIDifficultyChoice","totalWins","BoardSquare","disableBoard","GameBoard","board","setBoard","whoseTurn","nextTurn","gameOver","setGameInfo","players","draw","count","index","length","totalMarkedCells","AIMove","updateBoard","openCells","push","Math","floor","random","AI","boardCellValues","Array","fill","a","b","c","maxValueIndexes","forEach","max","console","log","cellIndex","nextBoard","slice","renderBoardSquare","useEffect","checkForWinner","checkForWinningLine","TicTacToe","setPlayers","setDisableBoard","setHideUnchecked","setPlayAgainIsHidden","setWhoseTurn","onChangeHumanOrAI","event","newPlayers","target","onChangeAIDifficulty","nextPlayersTurn","winner","destination","document","getElementById","App","gameId","setGameId","ReactDOM","render"],"mappings":"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","file":"static/js/main.df1a7f27.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport \"../index.css\";\r\n\r\nfunction GameInfo(props) {\r\n  const [startIsDisabled, setStartIsDisabled] = useState(false);\r\n  const [resetIsDisabled, setResetIsDisabled] = useState(false);\r\n\r\n  function startClicked() {\r\n    setStartIsDisabled(true);\r\n    setResetIsDisabled(false);\r\n\r\n    props.startClicked();\r\n  }\r\n\r\n  function playAgainClicked() {\r\n    props.playAgainClicked();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h4>{props.gameInfo}</h4>\r\n      <div>\r\n        <input\r\n          type=\"button\"\r\n          id=\"start\"\r\n          disabled={startIsDisabled}\r\n          onClick={startClicked}\r\n          value=\"Start\"\r\n        />\r\n        <input\r\n          type=\"button\"\r\n          id=\"reset\"\r\n          disabled={resetIsDisabled}\r\n          onClick={props.resetGame}\r\n          value=\"Reset\"\r\n        />\r\n      </div>\r\n      <input\r\n        type=\"button\"\r\n        id=\"playAgain\"\r\n        className={props.playAgainIsHidden ? \"hidden\" : \"\"}\r\n        onClick={playAgainClicked}\r\n        value=\"Play Again?\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameInfo;\r\n","import React from \"react\";\r\nimport \"../index.css\";\r\n\r\nfunction Player ({thePlayer, changeHumanOrAI, changeAIDifficulty, hideUnchecked}) {\r\n\r\n  function hideUnselectedPlayers(playerChecked) {\r\n    let isHideUncheckedHidden = hideUnchecked && !(thePlayer.humanOrAI === playerChecked)\r\n\r\n    if (isHideUncheckedHidden) {\r\n      return 'hidden';\r\n    }\r\n    return ''\r\n  }\r\n\r\n  function hideUnselectedAIDifficulty(AIDifficultyChecked) {\r\n    let isHideUncheckedHidden = hideUnchecked && !(thePlayer.AIDifficulty === AIDifficultyChecked)\r\n\r\n    if (isHideUncheckedHidden) {\r\n      return 'hidden';\r\n    }\r\n    return ''\r\n  }\r\n\r\n    return (\r\n        <div className='sidebar'>\r\n        <label id=\"playerMarker\" className=\"playerMarker\">{thePlayer.marker}</label>\r\n        <div>\r\n          <input type=\"radio\" className={hideUnselectedPlayers('Human')} id={\"player\"+thePlayer.id+\"Human\"} name={\"player\"+thePlayer.id} value=\"Human\" checked={thePlayer.humanOrAI === 'Human'} onChange={(e) => {changeHumanOrAI(e, thePlayer.id)} }/>\r\n          <label htmlFor={\"player\"+thePlayer.id+\"Human\"} className={hideUnselectedPlayers('Human')}>Human</label>\r\n          <input type=\"radio\" className={hideUnselectedPlayers('AI')} id={\"player\"+thePlayer.id+\"AI\"} name={\"player\"+thePlayer.id} value=\"AI\" checked={thePlayer.humanOrAI === 'AI'} onChange={(e) => {changeHumanOrAI(e, thePlayer.id)}}/>\r\n          <label htmlFor={\"player\"+thePlayer.id+\"AI\"} className={hideUnselectedPlayers('AI')}>AI</label>\r\n        </div>\r\n        <div className={thePlayer.hideAIDifficultyChoice ? 'hidden' : ''}>\r\n          <input type=\"radio\" className={hideUnselectedAIDifficulty('Easy')} id={\"player\"+thePlayer.id+\"Easy\"} name={\"player\"+thePlayer.id+thePlayer.AIDifficulty} value=\"Easy\" checked={thePlayer.AIDifficulty === 'Easy'} onChange={(e) => {changeAIDifficulty(e, thePlayer.id)}}/>\r\n          <label htmlFor={\"player\"+thePlayer.id+\"Easy\"} className={hideUnselectedAIDifficulty('Easy')}>Easy</label>\r\n          <input type=\"radio\" className={hideUnselectedAIDifficulty('Medium')} id={\"player\"+thePlayer.id+\"Medium\"} name={\"player\"+thePlayer.id+thePlayer.AIDifficulty} value=\"Medium\" checked={thePlayer.AIDifficulty === 'Medium'} onChange={(e) => {changeAIDifficulty(e, thePlayer.id)}}/>\r\n          <label htmlFor={\"player\"+thePlayer.id+\"Medium\"} className={hideUnselectedAIDifficulty('Medium')}>Medium</label>\r\n        </div>\r\n  \r\n        <label className='wins'>Wins: </label>\r\n        <label className='wins'>{thePlayer.totalWins}</label>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Player;","import React from \"react\";\r\n\r\nimport \"../index.css\";\r\n\r\nfunction BoardSquare({value, disableBoard, onClick}) {\r\n    return (\r\n        <input type=\"button\" className='cell' disabled={disableBoard} value={value} onClick={onClick}/> \r\n    );\r\n}\r\n\r\nexport default BoardSquare;","import React, { useEffect } from \"react\";\r\n\r\nimport \"../index.css\";\r\nimport BoardSquare from \"./BoardSquare\";\r\nimport * as AI from \"../AI.js\"\r\n\r\nfunction GameBoard({board, setBoard, disableBoard, whoseTurn, nextTurn, gameOver, setGameInfo, players}) {\r\n    const draw = totalMarkedCells() === 9;\r\n\r\n    function totalMarkedCells() {\r\n        let count = 0;\r\n        for (let index = 0; index < board.length; index++) {\r\n            if (board[index] !== '') {\r\n                count += 1;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    function AIMove() {\r\n        // AI MOVES\r\n        if (players[whoseTurn].humanOrAI === 'AI') {\r\n            if (players[whoseTurn].AIDifficulty === \"Easy\") {\r\n                updateBoard(AI.Easy(board));\r\n            } else if (players[whoseTurn].AIDifficulty === \"Medium\") {\r\n                updateBoard(AI.Medium(board));\r\n            }\r\n        }\r\n    }\r\n\r\n    function updateBoard(cellIndex) {\r\n        if (board[cellIndex] === '') {\r\n            const nextBoard = board.slice();\r\n            nextBoard[cellIndex] = players[whoseTurn].marker;\r\n            setBoard(nextBoard);\r\n            nextTurn();\r\n        }  \r\n    }\r\n\r\n    function checkForWinningLine() {\r\n        // horizontal check\r\n        for (let index = 0; index < 3; index++) {\r\n            let a = board[0 + (index * 3)];\r\n            let b = board[1 + (index * 3)];\r\n            let c = board[2 + (index * 3)];\r\n\r\n            if (a === b && a === c && b === c) {\r\n                return a;\r\n            }\r\n        }\r\n\r\n        // vertical check\r\n        for (let index = 0; index < 3; index++) {\r\n            let a = board[0 + index];\r\n            let b = board[3 + index];\r\n            let c = board[6 + index];\r\n\r\n            if (a === b && a === c && b === c) {\r\n                return a;\r\n            }\r\n        }\r\n\r\n        // upper left to lower right diagonal check \r\n        if (board[0] === board[4] && board[0] === board[8] && board[4] === board[8]) {\r\n\r\n            return board[0];\r\n        }\r\n\r\n        // upper right to lower left diagonal check\r\n        if (board[2] === board[4] && board[2] === board[6] && board[4] === board[6]) {\r\n            return board[2];\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (disableBoard===false) {\r\n            let checkForWinner = checkForWinningLine();\r\n            if (checkForWinner !== '' ) {\r\n                gameOver(checkForWinner);\r\n            }\r\n            else if (draw) {\r\n                gameOver('tie');\r\n            } \r\n            else {\r\n                setGameInfo(players[whoseTurn].marker + \"'s turn.\")\r\n                AIMove();\r\n            }\r\n        }\r\n    }, [board, disableBoard]);\r\n\r\n    function renderBoardSquare(cellIndex) {\r\n        return <BoardSquare \r\n                value={board[cellIndex]} \r\n                disableBoard={disableBoard}\r\n                onClick={() => {\r\n                    updateBoard(cellIndex);\r\n                }}\r\n                />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"gameBoardGrid\">\r\n            {renderBoardSquare(0)}\r\n            {renderBoardSquare(1)}\r\n            {renderBoardSquare(2)}\r\n\r\n            {renderBoardSquare(3)}\r\n            {renderBoardSquare(4)}\r\n            {renderBoardSquare(5)}\r\n\r\n            {renderBoardSquare(6)}\r\n            {renderBoardSquare(7)}\r\n            {renderBoardSquare(8)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameBoard;","// AI Gets Random Empty Cell Index\r\nexport function Easy(board) {\r\n    let openCells = [];\r\n\r\n    for (let index = 0; index < (board).length; index++) {\r\n        if (board[index] === '') {\r\n            openCells.push(index);\r\n        }\r\n    }\r\n\r\n    const randomIndex = Math.floor(Math.random() * openCells.length);\r\n\r\n    return openCells[randomIndex];\r\n}\r\n\r\nexport function Medium(board) {\r\n    // take middle cell\r\n    if (board[4] === '') {\r\n        return 4;\r\n    }\r\n\r\n    let boardCellValues = Array(9).fill(0);\r\n\r\n    for (let index = 0; index < board.length; index++) {\r\n        if (board[index] == '') {\r\n            boardCellValues[index] += 1;\r\n        }\r\n    }\r\n\r\n    // check diaginal for matchs\r\n    // upper left to lower right diagonal check \r\n    if ((board[0] === board[4] && board[0] !== '') || (board[0] === board[8] && board[0] !== '') || (board[4] === board[8]) && board[4] !== '') {\r\n        if (board[0] === '') {\r\n            boardCellValues[0] += 2;\r\n        }\r\n        if (board[4] === '') {\r\n            boardCellValues[4] += 2;\r\n        }\r\n        if (board[8] === '') {\r\n            boardCellValues[8] += 2;\r\n        }\r\n    }\r\n    \r\n    // upper right to lower left diagonal check\r\n    if ((board[2] === board[4] && board[2] !== '') || (board[2] === board[6] && board[2] !== '') || (board[4] === board[6]) && board[4] !== '') {\r\n        if (board[2] === '') {\r\n            boardCellValues[2] += 2;\r\n        }\r\n        if (board[4] === '') {\r\n            boardCellValues[4] += 2;\r\n        }\r\n        if (board[6] === '') {\r\n            boardCellValues[6] += 2;\r\n        }\r\n    }\r\n\r\n    // check horizontal for matches\r\n    for (let index = 0; index < 3; index++) {\r\n        let a = board[0 + (index * 3)];\r\n        let b = board[1 + (index * 3)];\r\n        let c = board[2 + (index * 3)];\r\n\r\n        if ((a === b && a !== '') || (a === c && a !== '') || (b === c && b !== '')) {\r\n            if (board[0 + (index * 3)] === '') {\r\n                boardCellValues[0 + (index * 3)] += 2;\r\n            }\r\n            if (board[1 + (index * 3)] === '') {\r\n                boardCellValues[1 + (index * 3)] += 2;\r\n            }\r\n            if (board[2 + (index * 3)] === '') {\r\n                boardCellValues[2 + (index * 3)] += 2;\r\n            }\r\n        }\r\n    }\r\n\r\n    // check vertical for matches\r\n    for (let index = 0; index < 3; index++) {\r\n        let a = board[0 + index];\r\n        let b = board[3 + index];\r\n        let c = board[6 + index];\r\n\r\n        if ((a === b && a !== '') || (a === c && a !== '') || (b === c && b !== '')) {\r\n            if (board[0 + index] === '') {\r\n                boardCellValues[0 + index] += 2;\r\n            }\r\n            if (board[3 + index] === '') {\r\n                boardCellValues[3 + index] += 2;\r\n            }\r\n            if (board[6 + index] === '') {\r\n                boardCellValues[6 + index] += 2;\r\n            }\r\n        }\r\n    }\r\n\r\n    // randomly pick a max value\r\n    const maxValueIndexes = [];\r\n\r\n    boardCellValues.forEach(function(value, index) {\r\n        if (value === Math.max(...boardCellValues)) {\r\n            maxValueIndexes.push(index);\r\n        }\r\n    });\r\n\r\n    console.log(boardCellValues);\r\n\r\n    return maxValueIndexes[Math.floor(Math.random() * maxValueIndexes.length)];\r\n}","import React, { useState } from \"react\";\r\n\r\nimport GameInfo from \"./GameInfo\"\r\nimport Player from \"./Player\"\r\nimport GameBoard from \"./GameBoard\"\r\n\r\nimport \"../index.css\";\r\n\r\nconst buildInitialPlayers = () => ([\r\n        {\r\n            id: 0,\r\n            marker: \"X\",\r\n            humanOrAI: \"Human\",\r\n            hideAIDifficultyChoice: true,\r\n            AIDifficulty: \"Easy\",\r\n            totalWins: 0\r\n        },\r\n        {\r\n            id: 1,\r\n            marker: \"O\",\r\n            humanOrAI: \"Human\",\r\n            hideAIDifficultyChoice: true,\r\n            AIDifficulty: \"Easy\",\r\n            totalWins: 0\r\n        }]); \r\n\r\nfunction TicTacToe(props) {\r\n    const [players, setPlayers] = useState(buildInitialPlayers());\r\n\r\n    const [disableBoard, setDisableBoard] = useState(true);\r\n    const [hideUnchecked, setHideUnchecked] = useState(false);\r\n    const [playAgainIsHidden, setPlayAgainIsHidden] = useState(true);\r\n\r\n    const [whoseTurn, setWhoseTurn] = useState(0);\r\n\r\n    const [gameInfo, setGameInfo] = useState(\"Click Start\");\r\n\r\n    const [board, setBoard] = useState(Array(9).fill(''));\r\n\r\n    function startClicked() {\r\n        setHideUnchecked(true);\r\n        setDisableBoard(false);\r\n\r\n        setGameInfo(players[whoseTurn].marker + \"'s turn.\");\r\n    }\r\n\r\n    function playAgainClicked() {\r\n        setBoard(Array(9).fill(''));\r\n        \r\n        setPlayAgainIsHidden(true);\r\n        setDisableBoard(false);\r\n        setGameInfo(players[whoseTurn].marker + \"'s turn.\");\r\n\r\n        // loser goes first next game\r\n        const nextTurn = 1 - whoseTurn;\r\n        setWhoseTurn(nextTurn);\r\n    }\r\n\r\n    function onChangeHumanOrAI(event, id) {\r\n        let newPlayers = [...players];\r\n\r\n        players[id].humanOrAI = event.target.value;\r\n\r\n        if (event.target.value === \"AI\") {\r\n            players[id].hideAIDifficultyChoice = false;\r\n        } else {\r\n            players[id].hideAIDifficultyChoice = true;\r\n        }\r\n\r\n        setPlayers(newPlayers);\r\n    }\r\n\r\n    function onChangeAIDifficulty(event, id) {\r\n        let newPlayers = [...players];\r\n        players[id].AIDifficulty = event.target.value;\r\n\r\n        setPlayers(newPlayers);\r\n    }\r\n\r\n    function gameOver(winner) {\r\n        if (winner === 'tie') {\r\n            setGameInfo(\"Tie.\");\r\n        }\r\n        /// player 1 wins\r\n        else if (players[0].marker === winner) {\r\n            let newPlayers = players;\r\n            newPlayers[0].totalWins += 1;\r\n\r\n            setPlayers(newPlayers);\r\n            setGameInfo(players[0].marker + \" won!\");\r\n            nextPlayersTurn();\r\n        } \r\n        // player 2 wins\r\n        else if (players[1].marker === winner) {\r\n            let newPlayers = players;\r\n            newPlayers[1].totalWins += 1;\r\n\r\n            setPlayers(newPlayers);\r\n\r\n            setGameInfo(players[1].marker + \" won!\");\r\n\r\n            nextPlayersTurn();\r\n        }\r\n\r\n        setDisableBoard(true);\r\n        setPlayAgainIsHidden(false);\r\n    }\r\n\r\n    function nextPlayersTurn() {            \r\n        const nextTurn = 1 - whoseTurn;\r\n\r\n        setWhoseTurn(nextTurn);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"gameInfo\">\r\n                <GameInfo gameInfo={gameInfo} \r\n                    playAgainIsHidden={playAgainIsHidden} \r\n                    startClicked={startClicked} \r\n                    resetGame={props.resetGame} \r\n                    playAgainClicked={playAgainClicked}/>\r\n            </div>\r\n            <div className=\"mainGrid\">\r\n                <Player thePlayer={players[0]}\r\n                    changeHumanOrAI={onChangeHumanOrAI} \r\n                    changeAIDifficulty={onChangeAIDifficulty}\r\n                    hideUnchecked={hideUnchecked} />\r\n                <GameBoard board={board} \r\n                    setBoard={setBoard} \r\n                    disableBoard={disableBoard} \r\n                    whoseTurn={whoseTurn} \r\n                    nextTurn={nextPlayersTurn} \r\n                    gameOver={gameOver} \r\n                    setGameInfo={setGameInfo} \r\n                    players={players}/>\r\n                <Player thePlayer={players[1]}\r\n                    changeHumanOrAI={onChangeHumanOrAI} \r\n                    changeAIDifficulty={onChangeAIDifficulty}\r\n                    hideUnchecked={hideUnchecked} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TicTacToe;","import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport TicTacToe from \"./components/TicTacToe.js\"\r\nimport \"./index.css\";\r\n\r\nvar destination = document.getElementById(\"container\");\r\n\r\nfunction App() {\r\n    const [gameId, setGameId] = useState(1);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Tic-Tac-Toe</h1>\r\n            <TicTacToe key={gameId} resetGame={() => setGameId(gameId + 1)}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    destination\r\n); "],"sourceRoot":""}