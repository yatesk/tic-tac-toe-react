[{"C:\\Users\\Work\\Desktop\\the_odin_project\\tic-tac-toe-react\\src\\index.js":"1","C:\\Users\\Work\\Desktop\\the_odin_project\\tic-tac-toe-react\\src\\components\\TicTacToe.js":"2","C:\\Users\\Work\\Desktop\\the_odin_project\\tic-tac-toe-react\\src\\components\\GameInfo.js":"3","C:\\Users\\Work\\Desktop\\the_odin_project\\tic-tac-toe-react\\src\\components\\GameBoard.js":"4","C:\\Users\\Work\\Desktop\\the_odin_project\\tic-tac-toe-react\\src\\components\\Player.js":"5","C:\\Users\\Work\\Desktop\\the_odin_project\\tic-tac-toe-react\\src\\AI.js":"6"},{"size":389,"mtime":1609736393804,"results":"7","hashOfConfig":"8"},{"size":8831,"mtime":1609736394808,"results":"9","hashOfConfig":"8"},{"size":1651,"mtime":1609123037102,"results":"10","hashOfConfig":"8"},{"size":1463,"mtime":1609929517670,"results":"11","hashOfConfig":"8"},{"size":2927,"mtime":1608772001532,"results":"12","hashOfConfig":"8"},{"size":2645,"mtime":1608886120920,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"18acugw",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\Work\\Desktop\\the_odin_project\\tic-tac-toe-react\\src\\index.js",[],["28","29"],"C:\\Users\\Work\\Desktop\\the_odin_project\\tic-tac-toe-react\\src\\components\\TicTacToe.js",["30"],"import React, { Component } from \"react\";\r\n\r\nimport GameInfo from \"./GameInfo\"\r\nimport Player from \"./Player\"\r\nimport GameBoard from \"./GameBoard\"\r\nimport \"../index.css\";\r\nimport * as AI from \"../AI.js\"\r\n\r\nconst buildInitialState = () => ({\r\n    Players: [\r\n        {\r\n            id: 0,\r\n            name: \"Player 1\",\r\n            marker: \"X\",\r\n            humanOrAI: \"Human\",\r\n            hideAIDifficultyChoice: true,\r\n            AIDifficulty: \"Easy\",\r\n            totalWins: 0\r\n        },\r\n\r\n        {\r\n            id: 1,\r\n            name: \"Player 2\",\r\n            marker: \"O\",\r\n            humanOrAI: \"Human\",\r\n            hideAIDifficultyChoice: true,\r\n            AIDifficulty: \"Easy\",\r\n            totalWins: 0\r\n        }],\r\n\r\n    board: ['', '', '',\r\n            '', '', '',\r\n            '', '', ''],\r\n    totalMarkedCells: 0,\r\n    whoseTurn: 0,\r\n    disableBoard: true,\r\n    gameInfo: \"Click Start\",\r\n    playAgainIsHidden: true,\r\n    hideUnChecked: false,\r\n});\r\n\r\nclass TicTacToe extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ...buildInitialState()\r\n        };\r\n\r\n        this.startClicked = this.startClicked.bind(this);\r\n        this.resetClicked = this.resetClicked.bind(this);\r\n        this.playAgainClicked = this.playAgainClicked.bind(this);\r\n\r\n        this.onChangeName = this.onChangeName.bind(this);\r\n        this.onChangeHumanOrAI = this.onChangeHumanOrAI.bind(this);\r\n        this.onChangeAIDifficulty = this.onChangeAIDifficulty.bind(this);\r\n\r\n        this.cellClicked = this.cellClicked.bind(this);\r\n    }\r\n\r\n    startClicked() {\r\n        this.setState({ hideUnChecked: true });\r\n        this.setState({ disableBoard: false });\r\n\r\n        if (this.state.Players[0].humanOrAI === 'AI') {\r\n            this.AIMove();\r\n        }\r\n    }\r\n\r\n    resetClicked() {\r\n        this.setState({ ...buildInitialState() });\r\n    }\r\n\r\n    playAgainClicked() {\r\n        const newBoard = [  '', '', '',\r\n                            '', '', '',\r\n                            '', '', ''];\r\n        this.setState({ board: newBoard });\r\n        this.setState({ playAgainIsHidden: true });\r\n        this.setState({ totalMarkedCells: 0 });\r\n        this.setState({ disableBoard: false });\r\n\r\n        // loser goes first next game\r\n        const nextTurn = 1 - this.state.whoseTurn;\r\n\r\n        this.setState({ whoseTurn: nextTurn });\r\n    }\r\n\r\n    onChangeName(event, id) {\r\n        let players = [...this.state.Players];\r\n        players[id].name = event.target.value;\r\n        this.setState({ players });\r\n    }\r\n\r\n    onChangeHumanOrAI(event, id) {\r\n        let players = [...this.state.Players];\r\n\r\n        players[id].humanOrAI = event.target.value;\r\n\r\n        if (event.target.value === \"AI\") {\r\n            players[id].hideAIDifficultyChoice = false;\r\n        } else {\r\n            players[id].hideAIDifficultyChoice = true;\r\n        }\r\n\r\n        this.setState({ players });\r\n    }\r\n\r\n    onChangeAIDifficulty(event, id) {\r\n        let players = [...this.state.Players];\r\n        players[id].AIDifficulty = event.target.value;\r\n        this.setState({ players });\r\n    }\r\n\r\n    cellClicked(event) {\r\n        this.markCell(parseInt(event.target.id));\r\n    }\r\n\r\n    AIMove() {\r\n        // AI MOVES\r\n        if (this.state.Players[this.state.whoseTurn].humanOrAI === 'AI') {\r\n            if (this.state.Players[this.state.whoseTurn].AIDifficulty === \"Easy\") {\r\n                console.log(\"p1 easy\");\r\n                this.markCell(AI.Easy(this.state.board));\r\n            } else if (this.state.Players[this.state.whoseTurn].AIDifficulty === \"Medium\") {\r\n                console.log(\"p1 medium\");\r\n                this.markCell(AI.Medium(this.state.board));\r\n            }\r\n        }\r\n    }\r\n\r\n    markCell(index) {\r\n        if (this.state.board[index] === '') {\r\n            let newBoard = [...this.state.board];\r\n\r\n            newBoard[index] = this.state.Players[this.state.whoseTurn].marker;\r\n\r\n            this.setState({ board: newBoard });\r\n            this.setState({ totalMarkedCells: this.state.totalMarkedCells + 1 })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.checkForWinner(this.state.Players[this.state.whoseTurn].marker)) {\r\n            this.gameOver();\r\n        } else if(this.state.totalMarkedCells != prevState.totalMarkedCells){\r\n            this.nextPlayersTurn(prevState);\r\n            this.AIMove();\r\n        }\r\n    }\r\n\r\n    gameOver() {\r\n        if (this.state.totalMarkedCells === 9) {\r\n            // to avoid infinite loop\r\n            this.setStateOnlyWhenValueChanged('gameInfo', \"Tie.\");\r\n        }\r\n        /// player 1 wins\r\n        else if (this.state.Players[0].marker === this.state.Players[this.state.whoseTurn].marker) {\r\n            this.setStateOnlyWhenValueChanged('Players[0].totalWins', 55);\r\n            this.setStateOnlyWhenValueChanged('gameInfo', this.state.Players[0].name + \" won!\");\r\n        } \r\n        // player 2 wins\r\n        else if (this.state.Players[1].marker === this.state.Players[this.state.whoseTurn].marker) {\r\n            this.setStateOnlyWhenValueChanged('gameInfo', this.state.Players[1].name + \" won!\");\r\n        }\r\n\r\n        this.setStateOnlyWhenValueChanged('disableBoard', true);\r\n        this.setStateOnlyWhenValueChanged('playAgainIsHidden', false);\r\n    }\r\n\r\n    // Prevents componentDidUpdate from entering an infinite loop\r\n    setStateOnlyWhenValueChanged(property, value) {\r\n        if (this.state[property] !== value) {\r\n            this.setState({[property]: value});\r\n        }\r\n    }\r\n\r\n    // componentWillUpdate(object nextProps, object nextState)\r\n    // instead - Using useState with useEffect\r\n\r\n    checkForWinner(whoseTurnMarker) {\r\n        if (this.state.totalMarkedCells === 9) {\r\n            // game ends in tie - no winner\r\n            return true;\r\n        }\r\n\r\n        if (this.checkForWinningLine() === whoseTurnMarker) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    checkForWinningLine() {\r\n        // horizontal check\r\n        for (let index = 0; index < 3; index++) {\r\n            let a = this.state.board[0 + (index * 3)];\r\n            let b = this.state.board[1 + (index * 3)];\r\n            let c = this.state.board[2 + (index * 3)];\r\n\r\n            if (a === b && a === c && b === c) {\r\n                return a;\r\n            }\r\n        }\r\n\r\n        // vertical check\r\n        for (let index = 0; index < 3; index++) {\r\n            let a = this.state.board[0 + index];\r\n            let b = this.state.board[3 + index];\r\n            let c = this.state.board[6 + index];\r\n\r\n            if (a === b && a === c && b === c) {\r\n                return a;\r\n            }\r\n        }\r\n\r\n        // upper left to lower right diagonal check \r\n        if (this.state.board[0] === this.state.board[4] && this.state.board[0] === this.state.board[8] && this.state.board[4] === this.state.board[8]) {\r\n\r\n            return this.state.board[0];\r\n        }\r\n\r\n        // upper right to lower left diagonal check\r\n        if (this.state.board[2] === this.state.board[4] && this.state.board[2] === this.state.board[6] && this.state.board[4] === this.state.board[6]) {\r\n            return this.state.board[2];\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n\r\n    nextPlayersTurn(prevState) {\r\n        if (this.state.whoseTurn === prevState.whoseTurn) {\r\n            // const nextTurn = this.state.whoseTurn === this.state.Players[0].marker ? this.state.Players[1].marker : this.state.Players[0].marker;\r\n            \r\n            const nextTurn = 1 - this.state.whoseTurn;\r\n\r\n            this.setState({ whoseTurn: nextTurn });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"gameInfo\">\r\n                    <GameInfo gameInfo={this.state.gameInfo} playAgainIsHidden={this.state.playAgainIsHidden} startClicked={this.startClicked} resetClicked={this.resetClicked} playAgainClicked={this.playAgainClicked}/>\r\n                </div>\r\n\r\n                <div className=\"mainGrid\">\r\n                    <Player Player={this.state.Players[0]} ID={0} changeName={this.onChangeName}\r\n                        changeHumanOrAI={this.onChangeHumanOrAI} changeAIDifficulty={this.onChangeAIDifficulty}\r\n                        hideUnchecked={this.state.hideUnChecked} />\r\n                    <GameBoard board={this.state.board} disableBoard={this.state.disableBoard} cellClicked={this.cellClicked} />\r\n                    <Player Player={this.state.Players[1]} ID={1} changeName={this.onChangeName}\r\n                        changeHumanOrAI={this.onChangeHumanOrAI} changeAIDifficulty={this.onChangeAIDifficulty}\r\n                        hideUnchecked={this.state.hideUnChecked} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TicTacToe;","C:\\Users\\Work\\Desktop\\the_odin_project\\tic-tac-toe-react\\src\\components\\GameInfo.js",[],"C:\\Users\\Work\\Desktop\\the_odin_project\\tic-tac-toe-react\\src\\components\\GameBoard.js",[],"C:\\Users\\Work\\Desktop\\the_odin_project\\tic-tac-toe-react\\src\\components\\Player.js",[],"C:\\Users\\Work\\Desktop\\the_odin_project\\tic-tac-toe-react\\src\\AI.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":146,"column":47,"nodeType":"37","messageId":"38","endLine":146,"endColumn":49},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]