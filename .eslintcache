[{"C:\\Users\\Work\\Desktop\\the_odin_project\\tic-tac-toe-react\\src\\index.js":"1","C:\\Users\\Work\\Desktop\\the_odin_project\\tic-tac-toe-react\\src\\components\\TicTacToe.js":"2","C:\\Users\\Work\\Desktop\\the_odin_project\\tic-tac-toe-react\\src\\components\\GameInfo.js":"3","C:\\Users\\Work\\Desktop\\the_odin_project\\tic-tac-toe-react\\src\\components\\GameBoard.js":"4","C:\\Users\\Work\\Desktop\\the_odin_project\\tic-tac-toe-react\\src\\components\\Player.js":"5","C:\\Users\\Work\\Desktop\\the_odin_project\\tic-tac-toe-react\\src\\AI.js":"6","C:\\Users\\Work\\Desktop\\the_odin_project\\tic-tac-toe-react\\src\\components\\BoardSquare.js":"7"},{"size":503,"mtime":1611170322946,"results":"8","hashOfConfig":"9"},{"size":4370,"mtime":1611170388617,"results":"10","hashOfConfig":"9"},{"size":1107,"mtime":1611170441296,"results":"11","hashOfConfig":"9"},{"size":3445,"mtime":1611171529224,"results":"12","hashOfConfig":"9"},{"size":2559,"mtime":1611170389470,"results":"13","hashOfConfig":"9"},{"size":3276,"mtime":1611257873955,"results":"14","hashOfConfig":"9"},{"size":272,"mtime":1611170354526,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"18acugw",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"C:\\Users\\Work\\Desktop\\the_odin_project\\tic-tac-toe-react\\src\\index.js",[],["32","33"],"C:\\Users\\Work\\Desktop\\the_odin_project\\tic-tac-toe-react\\src\\components\\TicTacToe.js",[],"C:\\Users\\Work\\Desktop\\the_odin_project\\tic-tac-toe-react\\src\\components\\GameInfo.js",[],"C:\\Users\\Work\\Desktop\\the_odin_project\\tic-tac-toe-react\\src\\components\\GameBoard.js",["34"],"import React, { useEffect } from \"react\";\r\n\r\nimport \"../index.css\";\r\nimport BoardSquare from \"./BoardSquare\";\r\nimport * as AI from \"../AI.js\"\r\n\r\nfunction GameBoard({board, setBoard, disableBoard, whoseTurn, nextTurn, gameOver, setGameInfo, players}) {\r\n    const draw = totalMarkedCells() === 9;\r\n\r\n    function totalMarkedCells() {\r\n        let count = 0;\r\n        for (let index = 0; index < board.length; index++) {\r\n            if (board[index] !== '') {\r\n                count += 1;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    function AIMove() {\r\n        // AI MOVES\r\n        if (players[whoseTurn].humanOrAI === 'AI') {\r\n            if (players[whoseTurn].AIDifficulty === \"Easy\") {\r\n                updateBoard(AI.Easy(board));\r\n            } else if (players[whoseTurn].AIDifficulty === \"Medium\") {\r\n                updateBoard(AI.Medium(board));\r\n            }\r\n        }\r\n    }\r\n\r\n    function updateBoard(cellIndex) {\r\n        if (board[cellIndex] === '') {\r\n            const nextBoard = board.slice();\r\n            nextBoard[cellIndex] = players[whoseTurn].marker;\r\n            setBoard(nextBoard);\r\n            nextTurn();\r\n        }  \r\n    }\r\n\r\n    function checkForWinningLine() {\r\n        // horizontal check\r\n        for (let index = 0; index < 3; index++) {\r\n            let a = board[0 + (index * 3)];\r\n            let b = board[1 + (index * 3)];\r\n            let c = board[2 + (index * 3)];\r\n\r\n            if (a === b && a === c && b === c) {\r\n                return a;\r\n            }\r\n        }\r\n\r\n        // vertical check\r\n        for (let index = 0; index < 3; index++) {\r\n            let a = board[0 + index];\r\n            let b = board[3 + index];\r\n            let c = board[6 + index];\r\n\r\n            if (a === b && a === c && b === c) {\r\n                return a;\r\n            }\r\n        }\r\n\r\n        // upper left to lower right diagonal check \r\n        if (board[0] === board[4] && board[0] === board[8] && board[4] === board[8]) {\r\n\r\n            return board[0];\r\n        }\r\n\r\n        // upper right to lower left diagonal check\r\n        if (board[2] === board[4] && board[2] === board[6] && board[4] === board[6]) {\r\n            return board[2];\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (disableBoard===false) {\r\n            let checkForWinner = checkForWinningLine();\r\n            if (checkForWinner !== '' ) {\r\n                gameOver(checkForWinner);\r\n            }\r\n            else if (draw) {\r\n                gameOver('tie');\r\n            } \r\n            else {\r\n                setGameInfo(players[whoseTurn].marker + \"'s turn.\")\r\n                AIMove();\r\n            }\r\n        }\r\n    }, [board, disableBoard]);\r\n\r\n    function renderBoardSquare(cellIndex) {\r\n        return <BoardSquare \r\n                value={board[cellIndex]} \r\n                disableBoard={disableBoard}\r\n                onClick={() => {\r\n                    updateBoard(cellIndex);\r\n                }}\r\n                />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"gameBoardGrid\">\r\n            {renderBoardSquare(0)}\r\n            {renderBoardSquare(1)}\r\n            {renderBoardSquare(2)}\r\n\r\n            {renderBoardSquare(3)}\r\n            {renderBoardSquare(4)}\r\n            {renderBoardSquare(5)}\r\n\r\n            {renderBoardSquare(6)}\r\n            {renderBoardSquare(7)}\r\n            {renderBoardSquare(8)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameBoard;","C:\\Users\\Work\\Desktop\\the_odin_project\\tic-tac-toe-react\\src\\components\\Player.js",[],"C:\\Users\\Work\\Desktop\\the_odin_project\\tic-tac-toe-react\\src\\AI.js",["35","36","37","38","39"],"C:\\Users\\Work\\Desktop\\the_odin_project\\tic-tac-toe-react\\src\\components\\BoardSquare.js",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":91,"column":8,"nodeType":"46","endLine":91,"endColumn":29,"suggestions":"47"},{"ruleId":"48","severity":1,"message":"49","line":25,"column":26,"nodeType":"50","messageId":"51","endLine":25,"endColumn":28},{"ruleId":"52","severity":1,"message":"53","line":32,"column":98,"nodeType":"54","messageId":"55","endLine":32,"endColumn":100},{"ruleId":"52","severity":1,"message":"53","line":32,"column":125,"nodeType":"54","messageId":"55","endLine":32,"endColumn":127},{"ruleId":"52","severity":1,"message":"53","line":45,"column":98,"nodeType":"54","messageId":"55","endLine":45,"endColumn":100},{"ruleId":"52","severity":1,"message":"53","line":45,"column":125,"nodeType":"54","messageId":"55","endLine":45,"endColumn":127},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'AIMove', 'checkForWinningLine', 'draw', 'gameOver', 'players', 'setGameInfo', and 'whoseTurn'. Either include them or remove the dependency array. If 'gameOver' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["58"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","no-global-assign","no-unsafe-negation",{"desc":"59","fix":"60"},"Update the dependencies array to be: [AIMove, board, checkForWinningLine, disableBoard, draw, gameOver, players, setGameInfo, whoseTurn]",{"range":"61","text":"62"},[2689,2710],"[AIMove, board, checkForWinningLine, disableBoard, draw, gameOver, players, setGameInfo, whoseTurn]"]